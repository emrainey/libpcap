#!/usr/bin/env python

# Copyright (c) 2016-2022, Adam Karpierz
# Licensed under the BSD license
# https://opensource.org/licenses/BSD-3-Clause

#include <fcntl.h>
#include <errno.h>

import ctypes as ct

import libpcap as pcap

outfile = None

def fuzz_openFile(name: str):
    global outfile
    if outfile is not None:
        outfile.close()
    outfile = open(name, "wt")

static int bufferToFile(const char * name, const uint8_t *Data, size_t Size) :
{
    FILE * fd;
    if (remove(name) != 0) {
        if (errno != ENOENT) {
            print("failed remove, errno={}".format(errno))
            return -1
        }
    }
    fd = open(name, "wb")
    if (fd == NULL) {
        print("failed open, errno={}".format(errno))
        return -2
    }
    with fd:
        if (fwrite (Data, 1, Size, fd) != Size) {
            return -3
        }

    return 0
}

def LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) -> int:

    char errbuf[PCAP_ERRBUF_SIZE];
    const u_char *pkt;
    struct pcap_stat stats;
    int r;

    # initialize output file
    if outfile is None:
        outfile = fopen("/dev/null", "w")
        if outfile is None:
            return 0

    # rewrite buffer to a file as libpcap does not have buffer inputs
    if bufferToFile("/tmp/fuzz.pcap", Data, Size) < 0:
        return 0

    # initialize structure
    pkts = pcap.open_offline("/tmp/fuzz.pcap", errbuf)
    if not pkts:
        print("Couldn't open pcap file {}".format(errbuf), file=outfile)
        return 0

    # loop over packets
    header = ct.POINTER(pcap_pkthdr)()
    r = pcap.next_ex(pkts, ct.byref(header), &pkt)
    while r > 0:
        # TODO pcap.offline_filter
        print("packet length={}/{}".format(header->caplen, header->len), file=outfile)
        r = pcap.next_ex(pkts, ct.byref(header), &pkt)
    if pcap.stats(pkts, &stats) == 0:
        print("number of packets={}".format(stats.ps_recv), file=outfile)

    # close structure
    pcap.close(pkts)

    return 0
